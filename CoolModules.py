from .. import loader, utils
from asyncio import sleep
import random
import io, inspect
from telethon import events
from telethon.errors.rpcerrorlist import YouBlockedUserError
import os
from gtts import gTTS
from telethon.tl.functions.photos import GetUserPhotosRequest
from telethon.tl.functions.users import GetFullUserRequest
from asyncio.exceptions import TimeoutError
import json
import base64
import requests
from telethon.tl.patched import Message
from telethon.tl import types
from typing import List, Union
from time import gmtime
import telethon

def get_message_media(message: Message): #—Ö—É–∏—Ç–∞ fsq
    data = None
    if message and message.media:
        data = message.photo or message.sticker or message.video or message.video_note or message.gif or message.web_preview
    return data
def get_entities(entities: types.TypeMessageEntity): #—Ö—É–∏—Ç–∞ fsq
    # coded by @droox
    r = []
    if entities:
        for entity in entities:
            entity = entity.to_dict()
            entity["type"] = entity.pop("_").replace("MessageEntity", "").lower()
            r.append(entity)
    return r
def get_message_text(message: Message, reply: bool = False): #—Ö—É–∏—Ç–∞ fsq
    return (
        "üì∑ –§–æ—Ç–æ"
        if message.photo and reply
        else message.file.emoji + " –°—Ç–∏–∫–µ—Ä"
        if message.sticker and reply
        else "üìπ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
        if message.video_note and reply
        else "üìπ –í–∏–¥–µ–æ"
        if message.video and reply
        else "üñº GIF"
        if message.gif and reply
        else "üìä –û–ø—Ä–æ—Å"
        if message.poll
        else "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        if message.geo
        else "üë§ –ö–æ–Ω—Ç–∞–∫—Ç"
        if message.contact
        else f"üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {strftime(message.voice.attributes[0].duration)}"
        if message.voice
        else f"üéß –ú—É–∑—ã–∫–∞: {strftime(message.audio.attributes[0].duration)} | {message.audio.attributes[0].performer} - {message.audio.attributes[0].title}"
        if message.audio
        else f"üíæ –§–∞–π–ª: {message.file.name}"
        if type(message.media) == types.MessageMediaDocument and not get_message_media(message)
        else f"{message.media.emoticon} –î–∞–π—Å: {message.media.value}"
        if type(message.media) == types.MessageMediaDice
        else f"Service message: {message.action.to_dict()['_']}"
        if type(message) == types.MessageService
        else ""
    )
def strftime(time: Union[int, float]): #—Ö—É–∏—Ç–∞
    t = gmtime(time)
    return (
        (
            f"{t.tm_hour:02d}:"
            if t.tm_hour > 0
            else ""
        ) + f"{t.tm_min:02d}:{t.tm_sec:02d}"
    )
    
class ManyMod(loader.Module):
    """–°–±—Ä–æ–Ω–∏–∫ —Å —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏"""
    strings = {
        "name": "—Ö–æ—Ä–æ—à–∏–µ –º–æ–¥—É–ª–∏",
        "no_reply": "<b>[SQuotes]</b> –ù–µ—Ç —Ä–µ–ø–ª–∞—è",
        "processing": "<b>[SQuotes]</b> –û–±—Ä–∞–±–æ—Ç–∫–∞...",
        "api_processing": "<b>[SQuotes]</b> –û–∂–∏–¥–∞–Ω–∏–µ API...",
        "api_error": "<b>[SQuotes]</b> –û—à–∏–±–∫–∞ API",
        "loading_media": "<b>[SQuotes]</b> –û—Ç–ø—Ä–∞–≤–∫–∞...",
        "no_args_or_reply": "<b>[SQuotes]</b> –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è",
        "args_error": "<b>[SQuotes]</b> –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–ø—Ä–æ—Å –±—ã–ª: <code>{}</code>",
        "too_many_messages": "<b>[SQuotes]</b> –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ú–∞–∫—Å–∏–º—É–º: <code>{}</code>"}
    def __init__(self):
        self.name = self.strings['name']
        self._me = None
        self._ratelimit = []
    async def client_ready(self, client: telethon.TelegramClient, db: dict):
        self.client = client
        self.db = db
        self.api_endpoint = "https://quotes.fl1yd.su/generate"
        self.settings = self.get_settings()
    #########################################################################################################
    async def helpcmcmd(self, message): #help
        """–ù–∞–ø–∏—à–∏ '.helpCM', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ! –¢–∞–∫-–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π '.help CoolModules', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö."""
        await message.edit("<b>–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –º–æ–¥—É–ª–µ–º, —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å:</b>\n1) <code>.terminal pip install --upgrade pip</code>\n2) <code>.terminal pip install gtts</code>\n3) <code>.terminal pip install telethon</code>\n\n<b>–ú–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–∏–Ω –º–æ–¥—É–ª—å:</b>\n\n1) Spam - —Å–ø–∞–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏; <b>.spam</b>\n2) Tagall - —Å–æ–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞; <b>.tagall</b>\n3) DelMsg - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è; <b>.delmsg</b>\n4) Shiper - —à–∏–ø–µ—Ä–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤; <b>.shiper</b>\n5) RandNumb - –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ; <b>.rand</b>\n6) SavePic - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ; <b>.–∑–≥</b>\n7) IamGhoul - —Å–ø–∞–º 1000-7; <b>.ghoul</b>\n8) ModulesLink - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —É–∂–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å; <b>.ml</b>\n9) HackChat - –∑–∞—Å–æ—Ä –ª–æ–≥–æ–≤ + —Ñ–µ–π–∫ –≤–∑–ª–æ–º —á–∞—Ç–∞; <b>.hack</b>\n10) Print - –ø–æ —Å–∏–º–≤–æ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ; <b>.print</b>\n11) Type - –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–ª–∞–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ; <b>.type</b>\n12) NedoQuotes - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏; <b>.nq</b>\n13)  SayText - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ; <b>.say</b>\n14) WhoIs - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ; <b>.whois</b>\n15) RusRoul - –∏–≥—Ä–∞ —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞(–±–µ–∑–æ–ø–∞—Å–Ω–æ); <b>.rusroul</b>\n16) Wikipedia - –≤—ã–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏; <b>.wiki</b>\n17) TextS - –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤ —Å–ª–æ–≤–µ; <b>.ts</b>\n18) TextEdit - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ; <b>.te</b>\n19) Online - –¥–µ–ª–∞–µ—Ç –≤–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω; <b>.online</b>\n20) SQuotes (–ß–∞—Å—Ç—å –º–æ–¥—É–ª—è) - —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è; <b>.fsq</b>\n\n<b>by @CREATIVE_tg1</b>")

    async def spamcmd(self, message): #1
        """–ú–æ–¥—É–ª—å Spam - —Å–ø–∞–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏: '.spam (–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π) (—Ç–µ–∫—Å—Ç)'."""
        args = utils.get_args_raw(message).split(" ")
        await message.delete()
        numb = int(args[0])
        text = " ".join(args[1:])
        for _ in range(numb):
            await message.respond(text)
        
    async def tagallcmd(self, message): #2
        """–ú–æ–¥—É–ª—å TagAll - —Å–æ–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.tagall (—Ç–µ–∫—Å—Ç —Å–æ–∑—ã–≤–∞)'."""
        def chunks(lst, n):
            for i in range(0, len(lst), n):
                yield lst[i:i + n]
        args = utils.get_args_raw(message)
        await message.delete()
        if not args:
            args = "–û–±—â–∏–π —Å–±–æ—Ä!"
        chatId = message.chat_id
        users = [i for i in await message.client.get_participants(chatId) if i.bot == False and i.deleted == False]
        array = []
        for i in users:
           array.append(f"<a href=tg://user?id={i.id}>\u206c\u206f</a>")
        chunkss = list(chunks(array, 49))
        for i in chunkss:
            await message.respond(args + "".join(i))
            await sleep(0.2)
            
    async def delmsgcmd(self, message): #3
        """–ú–æ–¥—É–ª—å DelMsg - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —á–∞—Ç–µ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.delmsg'."""
        msg = [msg async for msg in message.client.iter_messages(message.chat_id, from_user= "me")]
        for i in msg:
            await i.delete()
        await message.respond("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")
    
    async def shipercmd(self, message):  #4
        """–ú–æ–¥—É–ª—å Shiper - —à–∏–ø–µ—Ä–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.shiper' –∏–ª–∏ '.shiper @—é–∑–µ—Ä–Ω–µ–π–º1 –∏ @—é–∑–µ—Ä–Ω–µ–π–º2'."""
        args = utils.get_args_raw(message)
        chatId = message.chat_id
        if not args:
            rand = random.choices([i for i in await message.client.get_participants(chatId) if i.bot == False and i.deleted == False], k=2)
        else:
            args = args.split(" –∏ ")
            rand = [await message.client.get_entity(args[0]), await message.client.get_entity(args[1])]
        randtext = random.randint(1, 6)
        if randtext == 1:
            return await message.respond(f"<a href=tg://user?id={rand[0].id}>{rand[0].first_name}</a> –∏ <a href=tg://user?id={rand[1].id}>{rand[1].first_name}</a> –ª—é–±–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞!\n–ú—É—Ä-–ú—É—Äüòª")
        if randtext == 2:
          return await message.edit(f"<a href=tg://user?id={rand[0].id}>{rand[0].first_name}</a> –∏ <a href=tg://user?id={rand[1].id}>{rand[1].first_name}</a> –ª—é–±–æ–≤–Ω–∞—è –ø–∞—Ä–æ—á–∫–∞!\n–ß–º–æ–∫üòò")
        if randtext == 3:
            return await message.edit(f"–ü–∞—Ä–∞ –¥–Ω—è‚ù§Ô∏è:\n<a href=tg://user?id={rand[0].id}>{rand[0].first_name}</a> –∏ <a href=tg://user?id={rand[1].id}>{rand[1].first_name}</a>")
        if randtext == 4:
            return await message.edit(f"<a href=tg://user?id={rand[0].id}>{rand[0].first_name}</a> –ª—é–±–∏—Ç <a href=tg://user?id={rand[1].id}>{rand[1].first_name}</a> üòò")
        if randtext == 5:
            return await message.edit(f"<a href=tg://user?id={rand[0].id}>{rand[0].first_name}</a> –ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–∞ —á–∞–π <a href=tg://user?id={rand[1].id}>{rand[1].first_name}</a> ‚òï‚ù§Ô∏è")
        if randtext == 6:
            return await message.edit(f"<a href=tg://user?id={rand[0].id}>{rand[0].first_name}</a> –∑–∞—à–µ–ª –∫ <a href=tg://user?id={rand[1].id}>{rand[1].first_name}</a>\nüòèüî•")

    async def randcmd(self, message):  #5
        """–ú–æ–¥—É–ª—å RandNumb - –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.rand (–æ—Ç –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞) (–¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞)'."""
        args = utils.get_args_raw(message)
        if not args:
            numb1 = 0
            numb2 = 100
        else:
            numb1, numb2 = int(args.split(" ")[0]), int(args.split(" ")[1])
        await message.edit(str(random.randint(numb1, numb2)))
        
    async def –∑–≥cmd(self, message):  #6
        """–ú–æ–¥—É–ª—å SavePic - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.–∑–≥', —Ä–µ–ø–ª–µ–µ–º –Ω–∞ —Ñ–æ—Ç–æ."""
        reply = await message.get_reply_message() 
        if not reply or not reply.media.ttl_seconds: return await message.edit("–†–µ–ø–ª–∞–µ–º –Ω–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Ñ–æ—Ç–æ! ")
        await message.delete() 
        new = io.BytesIO(await reply.download_media(bytes)) 
        new.name = reply.file.name 
        await message.client.send_file("me", new)

    async def ghoulcmd(self, message):  #7
        """–ú–æ–¥—É–ª—å IamGhoul - —Å–ø–∞–º–∏—Ç 1000-7. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.ghoul'."""
        a = 1000
        await message.edit("–Ø –≥—É–ª—å!")
        while a != 6:
            c = str(a)
            a = a - 7
            b = str(a)
            d = c + " - 7 = " + b
            await message.respond(d)

    async def mlcmd(self, message):  #8
        """–ú–æ–¥—É–ª—å ModulesLink - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.ml (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è)'."""
        args = utils.get_args_raw(message)
        if not args:
            return await message.edit('–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.')
        await message.edit('–ò—â—É...')
        try:
            f = ' '.join([x.strings["name"] for x in self.allmodules.modules if args.lower() == x.strings["name"].lower()])
            r = inspect.getmodule(next(filter(lambda x: args.lower() == x.strings["name"].lower(), self.allmodules.modules)))
            link = str(r).split('(')[1].split(')')[0]
            if "http" not in link:
                text = f"–ú–æ–¥—É–ª—å {f}:"
            else:
                text = f"<a href=\"{link}\">–°—Å—ã–ª–∫–∞</a> –Ω–∞ {f}: <code>{link}</code>"
            out = io.BytesIO(r.__loader__.data)
            out.name = f + ".py"
            out.seek(0)
            await message.respond(text, file=out)
            await message.delete()
        except:
            return await message.edit("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    async def hackcmd(self, message):  #9
        """–ú–æ–¥—É–ª—å HackChat - –∑–∞—Å–æ—Ä—è–µ—Ç –ª–æ–≥–∏ + —Ñ–µ–π–∫ –≤–∑–ª–æ–º. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.hack'."""
        i = 0
        while i <= 99:
            await message.edit("<b>–í–∑–ª–æ–º —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ " + str(i) + "%</b>")
            i += 1
            await sleep(0.1)
        await sleep(0.3)
        await message.edit("<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω! –ï–≥–æ –¥–∞–Ω–Ω—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–±–ª–∞–∫–µ Telegram.</b>")
    
    async def printcmd(self, message): #10
        """–ú–æ–¥—É–ª—å Print - –ø–æ —Å–∏–º–≤–æ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.print (—Ç–µ–∫—Å—Ç)'."""
        text = list(utils.get_args_raw(message))
        a = ""
        for i in text:
            a += i
            await message.edit(a)
            await sleep(0.1)
            
    async def typecmd(self, message): #11
        """–ú–æ–¥—É–ª—å Type - –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–ª–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ø—Ä–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.type (—Å–º–∞–π–ª/—Å–∏–º–≤–æ–ª/—Ç–¥) (—Ç–µ–∫—Å—Ç)'."""
        msg = utils.get_args_raw(message).split(" ")
        text = list(" ".join(msg[1:]))
        smile = msg[0]
        a = ""
        b = ""
        for i in text:
            b = a + smile
            await message.edit(b)
            await sleep(0.2)
            a += i
            await message.edit(a)
    
    async def nqcmd(self, message): #12
        """–ú–æ–¥—É–ª—å NedoQuotes - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ü–∏—Ç–∞—Ç–æ–π –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.nq (—Ä–µ–ø–ª–µ–π/—Ç–µ–∫—Å—Ç)'."""
        chat = "@ShittyQuoteBot"
        text = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if not text and not reply:
            await message.edit("<b>–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ä–µ–ø–ª–∞—è!</b>")
            return
        await message.edit("<b>–í–∞–Ω —Å–µ–∫...</b>")
        async with message.client.conversation(chat) as conv:
            if text:
                try:
                    response = conv.wait_event(events.NewMessage(incoming=True, from_users=1389323591))
                    await message.client.send_message(chat, text)
                    response = await response
                except YouBlockedUserError:
                    await message.edit("<b>–£ —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω @ShittyQuoteBot, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–ª, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π –µ–≥–æ!</b>")
                    return
            else:
                try:
                    user = await utils.get_user(reply)
                    response = conv.wait_event(events.NewMessage(incoming=True, from_users=1389323591))
                    await message.client.send_message(chat, f"{reply.raw_text} (—Å) {user.first_name}")
                    response = await response
                except YouBlockedUserError:
                    await message.edit("<b>–£ —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω @ShittyQuoteBot, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–ª, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π –µ–≥–æ!</b>")
                    return
        if response.text:
            await message.client.send_message(message.to_id, f"<b> {response.text}</b>")
            await message.delete()
        if response.media:
            await message.client.send_file(message.to_id, response.media, reply_to=reply.id if reply else None)
            await message.delete()
        
    async def saycmd(self, message): #13
        """–ú–æ–¥—É–ª—å SayText - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.say (—Ç–µ–∫—Å—Ç)'."""
        reply = await message.get_reply_message()
        await message.edit("<b>–°–µ–∫.</b>")
        try:
            gTTS(text=f'{message.to_dict()["message"].split("say ")[1]}', lang='ru').save("say.ogg")
            await message.delete()
            if reply:
                await message.client.send_file(message.to_id, "say.ogg", voice_note=True, reply_to=reply.id)
            else:
                await message.client.send_file(message.to_id, "say.ogg", voice_note=True)
            os.system(f"rm -rf say.ogg")
        except:
            await message.edit("<b>–û—à–∏–±–∫–∞!</b>")
    
    async def whoiscmd(self, message): #14
        """–ú–æ–¥—É–ª—å WhoIs - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.whois (@—é–∑–µ—Ä–Ω–µ–π–º/—Ä–µ–ø–ª–µ–π)'."""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        await message.edit("<b>–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...</b>")
        try:
            if args:
                user = await message.client.get_entity(args if not args.isgidit() else int(args))
            else:
                user = await message.client.get_entity(reply.sender_id)
        except:
            user = await message.client.get_me()      
        user = await message.client(GetFullUserRequest(user.id))
        photo, caption = await get_info(user, message)
        await message.client.send_file(message.chat_id, photo, caption=caption, link_preview=False, reply_to=reply.id if reply else None)
        os.remove(photo)
        await message.delete()

    async def rusroulcmd(self, message): #15
        """–ú–æ–¥—É–ª—å RusRoul - –∏–≥—Ä–∞ —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞(–±–µ–∑–æ–ø–∞—Å–Ω–æ). –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.rusroul'."""
        await message.edit("–í—ã—Å—Ç—Ä–µ–ª...")
        rand = random.randint(1, 6)
        await sleep(1.5)
        if rand == 1:
            await message.edit("<b>–§—É—Ö, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ —Ä–∏—Å–∫—É–π!</b>")
        else:
            await message.edit("<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(</b>")

    async def wikicmd(self, message): #16
        """–ú–æ–¥—É–ª—å Wikipedia - –≤—ã–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.wiki (—á—Ç–æ –Ω–∞–π—Ç–∏ - —Ç–µ–∫—Å—Ç/—Ä–µ–ø–ª–µ–π)'."""
        try: 
            text = utils.get_args_raw(message) 
            reply = await message.get_reply_message() 
            chat = "@just_zhenya_bot" 
            if not text and not reply: 
                await message.edit("<b>–ê —ç–º... –∞ —á—Ç–æ –∏—Å–∫–∞—Ç—å —Ç–æ...</b>") 
                return 
            if text: 
                await message.edit("<b>–ò—â—É –º–∞—Ç–µ—Ä–∏–∞–ª</b>") 
                async with message.client.conversation(chat) as conv: 
                    try: 
                        response = conv.wait_event(events.NewMessage(incoming=True, from_users=528677877)) 
                        await message.client.send_message(chat, "/wiki " + text) 
                        response = await response 
                    except YouBlockedUserError: 
                        await message.reply("<b>–£–¥–∞–ª–∏ –∏–∑ –ß–°: @just_zhenya_bot</b>") 
                        return 
                    if not response.text: 
                        await message.edit("<–ï—â—ë —Ä–∞–∑ –ø—Ä–æ–±—É–π</b>") 
                        return 
                    await message.delete() 
                    await message.client.send_message(message.to_id, response.text) 
            if reply: 
                await message.edit("<b>–°–µ–∫...</b>") 
                async with message.client.conversation(chat) as conv: 
                    try: 
                        response = conv.wait_event(events.NewMessage(incoming=True, from_users=528677877)) 
                        await message.client.send_message(chat, reply) 
                        response = await response 
                    except YouBlockedUserError: 
                        await message.reply("<b>–£–¥–∞–ª–∏ –∏–∑ –ß–°: @just_zhenya_bot</b>") 
                        return 
                    if not response.text: 
                        await message.edit("<–ü—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ </b>") 
                        return 
                    await message.delete() 
                    await message.client.send_message(message.to_id, response.text) 
        except TimeoutError: 
            return await message.edit("<b>–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª(((</b>")

    async def tscmd(self, message): # 17
        """–ú–æ–¥—É–ª—å TextS - –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤ —Å–ª–æ–≤–µ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.ts (—Ç–µ–∫—Å—Ç)'."""
        text = utils.get_args_raw(message).replace(" ", "·Ö†")
        listtxt = list(text)
        for i in listtxt:
            await message.edit(i)
            await sleep(0.3)
        await message.edit(text)
        
    async def tecmd(self, message): # 18
        """–ú–æ–¥—É–ª—å TextEdit - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–∏—à–∏ '.te (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö) (—Ç–µ–∫—Å—Ç –¥–æ) | (—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ)' –∏–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–∏—à–∏ '.te (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö) (—Ç–µ–∫—Å—Ç)'."""
        text = utils.get_args_raw(message).split(" ")
        time = int(text[0])
        text = " ".join(text[1:]).split("|")
        if len(text) == 2:
            msg1 = text[0]
            msg2 = text[1]
            await message.edit(msg1)
            await sleep(time)
            await message.edit(msg2)
        elif len(text) == 1:
            msg1 = text[0]
            await message.edit(msg1)
            await sleep(time)
            await message.delete()
        else:
            await message.edit("<b>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑(</b>")
        
    async def onlinecmd(self, message): #19
        """–ú–æ–¥—É–ª—å Online - –¥–µ–ª–∞–µ—Ç –≤–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ '.online'."""
        if not self.db.get("Eternal Online", "status"):
            self.db.set("Eternal Online", "status", True)
            await message.edit("–í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –≤–∫–ª—é—á–µ–Ω.")
            while self.db.get("Eternal Online", "status"):
                await message.client(__import__("telethon").functions.account.UpdateStatusRequest(offline=False))
                await sleep(60)
        else:
            self.db.set("Eternal Online", "status", False)
            await message.edit("–í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –≤—ã–∫–ª—é—á–µ–Ω.")
            
    async def fsqcmd(self, message: Message): #20
        """–ú–æ–¥—É–ª—å SQuotes (–ß–∞—Å—Ç—å –º–æ–¥—É–ª—è) - —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–∏—à–∏ —Ä–µ–ø–ª–µ–µ–º '.fsq (—Ç–µ–∫—Å—Ç)'."""
        args: str = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if not (args or reply):
            return await utils.answer(
                message, self.strings["no_args_or_reply"])
        m = await utils.answer(
            message, self.strings["processing"])
        try:
            payload = await self.fakequote_parse_messages(args, reply)
        except (IndexError, ValueError):
            return await utils.answer(
                m, self.strings["args_error"].format(
                    message.text)
            )
        if len(payload) > self.settings["max_messages"]:
            return await utils.answer(
                m, self.strings["too_many_messages"].format(
                    self.settings["max_messages"])
            )
        payload = {
            "messages": payload,
            "quote_color": self.settings["bg_color"],
            "text_color": self.settings["text_color"]
        }
        if self.settings["debug"]:
            file = open("SQuotesDebug.json", "w")
            json.dump(
                payload, file, indent = 4,
                ensure_ascii = False,
            )
            await message.respond(
                file = file.name)
        await utils.answer(
            m, self.strings["api_processing"])
        r = await self._api_request(payload)
        if r.status_code != 200:
            return await utils.answer(
                m, self.strings["api_error"])
        quote = io.BytesIO(r.content)
        quote.name = "SQuote.webp"
        await utils.answer(m, quote)
        return await m[-1].delete()
    #########################################################################################################
    async def fakequote_parse_messages(self, args: str, reply: Message): #—Ö—É–∏—Ç–∞ fsq
        async def get_user(args: str):
            args_, text = args.split(), ""
            user = await self.client.get_entity(
                int(args_[0]) if args_[0].isdigit() else args_[0])
            if len(args_) < 2:
                user = await self.client.get_entity(
                    int(args) if args.isdigit() else args)
            else:
                text = args.split(maxsplit = 1)[1]
            return user, text
        if reply or reply and args:
            user = reply.sender
            name, avatar = await self.get_profile_data(user)
            text = args or ""
        else:
            messages = []
            for part in args.split("; "):
                user, text = await get_user(part)
                name, avatar = await self.get_profile_data(user)
                reply_id = reply_name = reply_text = None
                if " -r " in part:
                    user, text = await get_user(''.join(part.split(" -r ")[0]))
                    user2, text2 = await get_user(''.join(part.split(" -r ")[1]))
                    name, avatar = await self.get_profile_data(user)
                    name2, _ = await self.get_profile_data(user2)
                    reply_id = user2.id
                    reply_name = name2
                    reply_text = text2
                messages.append(
                    {
                        "text": text,
                        "media": None,
                        "entities": None,
                        "author": {
                            "id": user.id,
                            "name": name,
                            "avatar": avatar,
                            "rank": ""
                        },
                        "reply": {
                            "id": reply_id,
                            "name": reply_name,
                            "text": reply_text
                        }
                    }
                )
            return messages
        return [
            {
                "text": text,
                "media": None,
                "entities": None,
                "author": {
                    "id": user.id,
                    "name": name,
                    "avatar": avatar,
                    "rank": ""
                },
                "reply": {
                    "id": None,
                    "name": None,
                    "text": None
                }
            }
        ]
    async def get_profile_data(self, user: types.User): #—Ö—É–∏—Ç–∞ fsq
        avatar = await self.client.download_profile_photo(user.id, bytes)
        return telethon.utils.get_display_name(user), \
            base64.b64encode(avatar).decode() if avatar else None          
    def get_settings(self, force: bool = False): #—Ö—É–∏—Ç–∞ fsq
        settings: dict = self.db.get(
            "SQuotes", "settings", {}
        )
        if not settings or force:
            settings.update(
                {
                    "max_messages": 15,
                    "bg_color": "#162330",
                    "text_color": "#fff",
                    "debug": False
                }
            )
            self.db.set("SQuotes", "settings", settings)

        return settings
    async def _api_request(self, data: dict): #—Ö—É–∏—Ç–∞ fsq
        return await utils.run_sync(
            requests.post, self.api_endpoint, json = data)           

async def get_info(user, message): #—Ö—É–∏—Ç–∞ whois
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    uuser = user.user
    user_photos = await message.client(GetUserPhotosRequest(user_id=uuser.id, offset=42, max_id=0, limit=100))
    user_photos_count = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏."
    try:
        user_photos_count = user_photos.count
    except:
        pass
    user_id = uuser.id
    first_name = uuser.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∏–º—è."
    last_name = uuser.last_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Ñ–∞–º–∏–ª–∏—é."
    username = "@" + uuser.username or "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞."
    user_bio = user.about or "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ."
    common_chat = user.common_chats_count
    is_bot = "–î–∞" if uuser.bot else "–ù–µ—Ç"
    restricted = "–î–∞" if uuser.restricted else "–ù–µ—Ç"
    verified = "–î–∞" if uuser.verified else "–ù–µ—Ç"
    photo = await message.client.download_profile_photo(user_id, str(user_id) + ".jpg", download_big=True)
    caption = (f"<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:</b>\n\n<b>–ò–º—è:</b> {first_name}\n<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {username}\n<b>ID:</b> <code>{user_id}</code>\n<b>–ë–æ—Ç:</b> {is_bot}\n<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω:</b> {restricted}\n<b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:</b> {verified}\n\n<b>–û —Å–µ–±–µ:</b> \n<code>{user_bio}</code>\n\n<b>–ö–æ–ª-–≤–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ:</b> {user_photos_count}\n<b>–û–±—â–∏–µ —á–∞—Ç—ã:</b> {common_chat}\n<b>–ü–µ—Ä–º–∞–ª–∏–Ω–∫:</b> <a href=\"tg://user?id={user_id}\">–∫–ª–∏–∫</a>")
    return photo, caption
